generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name          String
  createdAt     DateTime
  email         String    @unique
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  id            String    @id @default(cuid()) @map("user_id")
  projects      Project[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id        String        @id @default(uuid())
  userId    String
  videoId   String
  config    Json
  createdAt DateTime      @default(now())
  slug      String        @unique
  cover     String
  title     String
  url       String?
  status    ProjectStatus @default(queued)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  shorts    Short[]
}

model Short {
  id            String   @id @default(uuid())
  projectId     String
  url           String
  title         String
  highlightText String
  from          Float
  to            Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("short")
}

enum ProjectStatus {
  queued
  analyzing
  completed
  failed
}
